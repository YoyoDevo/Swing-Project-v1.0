/*
 *File:  The Window
 *Authors: Nick Curinga, Tuan Pham, Cesar Pedroza, Devin Wells
 *Class: CS 245 - Programming Graphical User Interfaces 
 *
 *Assignment: Swing Project v1.2 
 *Date Last Modified:10/18/2016
 *
 * Purpose: To create a GUI of a games of Hangman, Color match, and Sudoku .  
 *
 */
package SwingProjectv1;

import java.awt.Color;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

public class TheWindow extends javax.swing.JFrame {

    private String word;
    private int score;
    private JTextField[] jtf;
    private JPanel[] lines;
    private JPanel[] theHangMan;
    private int z;
    private boolean over;
    private int totalLetterCount;
    private String[] names;
    private String[] scores;
    ArrayList<String> list;
    
  
    
    private Color colorCorrect;
    private Color colorChoice;
    private int colorScore;
    private int colorPlays;
    
    /**
     * Creates new form TheWindow
     */
    public TheWindow() {
        score = 100;
        word ="";
       jtf = new JTextField[8];
       lines = new JPanel[8];
       theHangMan = new JPanel[6];
       z = 0;
       over = false;
       totalLetterCount = 0;
      
       names = new String[5];
       scores = new String[5];
       list = new ArrayList<String>(5);
       initComponents();  
    }

    
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        startUp = new javax.swing.JPanel();
        projectLabel = new javax.swing.JLabel();
        teamLabel = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        highscoreButton = new javax.swing.JButton();
        creditsButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        highscores = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        backHighscoreButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        highscoresTextBox = new javax.swing.JTextArea();
        credits = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        backCreditsButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        hangmanGame = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        scoreTextField = new javax.swing.JTextField();
        aButton = new javax.swing.JButton();
        bButton = new javax.swing.JButton();
        cButton = new javax.swing.JButton();
        dButton = new javax.swing.JButton();
        eButton = new javax.swing.JButton();
        fButton = new javax.swing.JButton();
        gButton = new javax.swing.JButton();
        hButton = new javax.swing.JButton();
        iButton = new javax.swing.JButton();
        jButton = new javax.swing.JButton();
        kButton = new javax.swing.JButton();
        lButton = new javax.swing.JButton();
        mButton = new javax.swing.JButton();
        nButton = new javax.swing.JButton();
        oButton = new javax.swing.JButton();
        pButton = new javax.swing.JButton();
        qButton = new javax.swing.JButton();
        rButton = new javax.swing.JButton();
        sButton = new javax.swing.JButton();
        tButton = new javax.swing.JButton();
        uButton = new javax.swing.JButton();
        vButton = new javax.swing.JButton();
        wButton = new javax.swing.JButton();
        xButton = new javax.swing.JButton();
        yButton = new javax.swing.JButton();
        zButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        head = new javax.swing.JPanel();
        body = new javax.swing.JPanel();
        rightArm = new javax.swing.JPanel();
        leftArm = new javax.swing.JPanel();
        leftLeg = new javax.swing.JPanel();
        rightLeg = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        l8 = new javax.swing.JPanel();
        l1 = new javax.swing.JPanel();
        l3 = new javax.swing.JPanel();
        l4 = new javax.swing.JPanel();
        l5 = new javax.swing.JPanel();
        l2 = new javax.swing.JPanel();
        l7 = new javax.swing.JPanel();
        l6 = new javax.swing.JPanel();
        skipButton = new javax.swing.JButton();
        dateTextField = new javax.swing.JTextField();
        theWrong = new javax.swing.JLabel();
        colorGame = new javax.swing.JPanel();
        dateTextField1 = new javax.swing.JTextField();
        redButton = new javax.swing.JButton();
        greenButton = new javax.swing.JButton();
        purpleButton = new javax.swing.JButton();
        blueButton = new javax.swing.JButton();
        yellowButton = new javax.swing.JButton();
        answer = new javax.swing.JLabel();
        colorGameEnd = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        colorScoreText = new javax.swing.JLabel();
        endButton2 = new javax.swing.JButton();
        endPage = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        endButton = new javax.swing.JButton();
        finalScoreTextBox = new javax.swing.JTextField();
        sudokuGame = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(600, 400));

        mainPanel.setBackground(new java.awt.Color(0, 0, 0));
        mainPanel.setPreferredSize(new java.awt.Dimension(600, 400));
        mainPanel.setRequestFocusEnabled(false);
        mainPanel.setLayout(new java.awt.CardLayout());

        startUp.setBackground(new java.awt.Color(0, 0, 0));

        projectLabel.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        projectLabel.setForeground(new java.awt.Color(255, 255, 255));
        projectLabel.setText("CS 245 Quarter Project");

        teamLabel.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 18)); // NOI18N
        teamLabel.setForeground(new java.awt.Color(255, 255, 255));
        teamLabel.setText("By: Team Stack Underflow");

        javax.swing.GroupLayout startUpLayout = new javax.swing.GroupLayout(startUp);
        startUp.setLayout(startUpLayout);
        startUpLayout.setHorizontalGroup(
            startUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startUpLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(projectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(startUpLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(teamLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        startUpLayout.setVerticalGroup(
            startUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startUpLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(projectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(teamLabel)
                .addGap(121, 121, 121))
        );

        mainPanel.add(startUp, "card7");
        ActionListener showMenu = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startUp.setVisible(false);
                menu.setVisible(true);
            }
        };
        Timer menuTimer = new Timer(0, showMenu);
        menuTimer.setInitialDelay(3000);
        menuTimer.start();
        menuTimer.setRepeats(false);

        menu.setBackground(new java.awt.Color(0, 0, 0));
        menu.setPreferredSize(new java.awt.Dimension(600, 400));

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        highscoreButton.setText("Highscores");
        highscoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highscoreButtonActionPerformed(evt);
            }
        });

        creditsButton.setText("Credits");
        creditsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditsButtonActionPerformed(evt);
            }
        });

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SwingProjectv1/images.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuLayout.createSequentialGroup()
                        .addComponent(creditsButton)
                        .addGap(34, 34, 34))
                    .addGroup(menuLayout.createSequentialGroup()
                        .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playButton)
                            .addComponent(highscoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuLayout.createSequentialGroup()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(highscoreButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(creditsButton)
                        .addGap(67, 67, 67))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuLayout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))))
        );

        mainPanel.add(menu, "card2");

        highscores.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 0));
        jLabel1.setText("Highscores");

        backHighscoreButton.setText("Back");
        backHighscoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backHighscoreButtonActionPerformed(evt);
            }
        });

        highscoresTextBox.setEditable(false);
        highscoresTextBox.setColumns(20);
        highscoresTextBox.setRows(5);
        highscoresTextBox.setText("\n");
        jScrollPane1.setViewportView(highscoresTextBox);

        javax.swing.GroupLayout highscoresLayout = new javax.swing.GroupLayout(highscores);
        highscores.setLayout(highscoresLayout);
        highscoresLayout.setHorizontalGroup(
            highscoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(highscoresLayout.createSequentialGroup()
                .addGroup(highscoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(highscoresLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(backHighscoreButton)
                        .addGap(115, 115, 115)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(highscoresLayout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(176, Short.MAX_VALUE))
        );
        highscoresLayout.setVerticalGroup(
            highscoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(highscoresLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(highscoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(highscoresLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backHighscoreButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                .addGap(78, 78, 78))
        );

        mainPanel.add(highscores, "card3");

        credits.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel2.setBackground(new java.awt.Color(255, 51, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Credits");

        backCreditsButton.setText("Back");
        backCreditsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backCreditsButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Nick Caringa       009556235");

        jLabel7.setText("Cesar Pedroza   009977643");

        jLabel8.setText("Tuan Pham         009222226");

        jLabel9.setText("Devin Wells        009235655");

        javax.swing.GroupLayout creditsLayout = new javax.swing.GroupLayout(credits);
        credits.setLayout(creditsLayout);
        creditsLayout.setHorizontalGroup(
            creditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creditsLayout.createSequentialGroup()
                .addGroup(creditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(creditsLayout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(creditsLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(backCreditsButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, creditsLayout.createSequentialGroup()
                .addGap(1, 225, Short.MAX_VALUE)
                .addGroup(creditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(creditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel9)
                        .addComponent(jLabel8)))
                .addGap(161, 161, 161))
        );
        creditsLayout.setVerticalGroup(
            creditsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creditsLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backCreditsButton)
                .addGap(51, 51, 51))
        );

        mainPanel.add(credits, "card4");

        hangmanGame.setBackground(new java.awt.Color(204, 204, 204));
        hangmanGame.setPreferredSize(new java.awt.Dimension(600, 400));
        playTheGame();
        hangmanGame.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 0, 255));
        jLabel3.setText("Hangman");
        hangmanGame.add(jLabel3);
        jLabel3.setBounds(12, 13, 127, 29);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(204, 204, 204));
        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hangmanGame.add(jTextField1);
        jTextField1.setBounds(100, 210, 40, 36);

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(204, 204, 204));
        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hangmanGame.add(jTextField2);
        jTextField2.setBounds(150, 210, 40, 36);

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(204, 204, 204));
        jTextField3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hangmanGame.add(jTextField3);
        jTextField3.setBounds(200, 210, 40, 36);

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(204, 204, 204));
        jTextField4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hangmanGame.add(jTextField4);
        jTextField4.setBounds(250, 210, 40, 36);

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(204, 204, 204));
        jTextField5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hangmanGame.add(jTextField5);
        jTextField5.setBounds(300, 210, 40, 36);

        jTextField6.setEditable(false);
        jTextField6.setBackground(new java.awt.Color(204, 204, 204));
        jTextField6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hangmanGame.add(jTextField6);
        jTextField6.setBounds(350, 210, 40, 36);

        jTextField7.setEditable(false);
        jTextField7.setBackground(new java.awt.Color(204, 204, 204));
        jTextField7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        hangmanGame.add(jTextField7);
        jTextField7.setBounds(400, 210, 40, 36);

        jTextField8.setEditable(false);
        jTextField8.setBackground(new java.awt.Color(204, 204, 204));
        jTextField8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hangmanGame.add(jTextField8);
        jTextField8.setBounds(450, 210, 40, 36);

        jLabel4.setText("Score");
        hangmanGame.add(jLabel4);
        jLabel4.setBounds(12, 104, 53, 24);

        scoreTextField.setEditable(false);
        scoreTextField.setText("100");
        scoreTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreTextFieldActionPerformed(evt);
            }
        });
        hangmanGame.add(scoreTextField);
        scoreTextField.setBounds(12, 135, 60, 30);

        aButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        aButton.setText("A");
        aButton.setMaximumSize(new java.awt.Dimension(10, 10));
        aButton.setPreferredSize(new java.awt.Dimension(25, 20));
        aButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(aButton);
        aButton.setBounds(80, 260, 40, 32);

        bButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bButton.setText("B");
        bButton.setMaximumSize(new java.awt.Dimension(10, 10));
        bButton.setPreferredSize(new java.awt.Dimension(25, 20));
        bButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(bButton);
        bButton.setBounds(130, 260, 40, 32);

        cButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cButton.setText("C");
        cButton.setMaximumSize(new java.awt.Dimension(10, 10));
        cButton.setPreferredSize(new java.awt.Dimension(25, 20));
        cButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(cButton);
        cButton.setBounds(180, 260, 40, 32);

        dButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        dButton.setText("D");
        dButton.setMaximumSize(new java.awt.Dimension(10, 10));
        dButton.setPreferredSize(new java.awt.Dimension(25, 20));
        dButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(dButton);
        dButton.setBounds(230, 260, 40, 32);

        eButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        eButton.setText("E");
        eButton.setMaximumSize(new java.awt.Dimension(10, 10));
        eButton.setPreferredSize(new java.awt.Dimension(25, 20));
        eButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(eButton);
        eButton.setBounds(280, 260, 40, 32);

        fButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fButton.setText("F");
        fButton.setMaximumSize(new java.awt.Dimension(10, 10));
        fButton.setPreferredSize(new java.awt.Dimension(25, 20));
        fButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(fButton);
        fButton.setBounds(330, 260, 40, 32);

        gButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        gButton.setText("G");
        gButton.setMaximumSize(new java.awt.Dimension(10, 10));
        gButton.setPreferredSize(new java.awt.Dimension(25, 20));
        gButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(gButton);
        gButton.setBounds(380, 260, 40, 32);

        hButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        hButton.setText("H");
        hButton.setMaximumSize(new java.awt.Dimension(10, 10));
        hButton.setPreferredSize(new java.awt.Dimension(25, 20));
        hButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(hButton);
        hButton.setBounds(430, 260, 40, 32);

        iButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        iButton.setText("I");
        iButton.setMaximumSize(new java.awt.Dimension(10, 10));
        iButton.setPreferredSize(new java.awt.Dimension(25, 20));
        iButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(iButton);
        iButton.setBounds(480, 260, 40, 32);

        jButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton.setText("J");
        jButton.setMaximumSize(new java.awt.Dimension(10, 10));
        jButton.setPreferredSize(new java.awt.Dimension(25, 20));
        jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(jButton);
        jButton.setBounds(110, 300, 40, 32);

        kButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        kButton.setText("K");
        kButton.setMaximumSize(new java.awt.Dimension(10, 10));
        kButton.setPreferredSize(new java.awt.Dimension(25, 20));
        kButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(kButton);
        kButton.setBounds(160, 300, 40, 32);

        lButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lButton.setText("L");
        lButton.setMaximumSize(new java.awt.Dimension(10, 10));
        lButton.setPreferredSize(new java.awt.Dimension(25, 20));
        lButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(lButton);
        lButton.setBounds(210, 300, 40, 32);

        mButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        mButton.setText("M");
        mButton.setMaximumSize(new java.awt.Dimension(10, 10));
        mButton.setPreferredSize(new java.awt.Dimension(25, 20));
        mButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(mButton);
        mButton.setBounds(260, 300, 40, 32);

        nButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        nButton.setText("N");
        nButton.setMaximumSize(new java.awt.Dimension(10, 10));
        nButton.setPreferredSize(new java.awt.Dimension(25, 20));
        nButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(nButton);
        nButton.setBounds(310, 300, 40, 32);

        oButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        oButton.setText("O");
        oButton.setMaximumSize(new java.awt.Dimension(10, 10));
        oButton.setPreferredSize(new java.awt.Dimension(25, 20));
        oButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(oButton);
        oButton.setBounds(360, 300, 40, 32);

        pButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        pButton.setText("P");
        pButton.setMaximumSize(new java.awt.Dimension(10, 10));
        pButton.setPreferredSize(new java.awt.Dimension(25, 20));
        pButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(pButton);
        pButton.setBounds(410, 300, 40, 32);

        qButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        qButton.setText("Q");
        qButton.setMaximumSize(new java.awt.Dimension(10, 10));
        qButton.setPreferredSize(new java.awt.Dimension(25, 20));
        qButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(qButton);
        qButton.setBounds(460, 300, 40, 32);

        rButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rButton.setText("R");
        rButton.setMaximumSize(new java.awt.Dimension(10, 10));
        rButton.setPreferredSize(new java.awt.Dimension(25, 20));
        rButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(rButton);
        rButton.setBounds(510, 300, 40, 32);

        sButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        sButton.setText("S");
        sButton.setMaximumSize(new java.awt.Dimension(10, 10));
        sButton.setPreferredSize(new java.awt.Dimension(25, 20));
        sButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(sButton);
        sButton.setBounds(130, 340, 40, 32);

        tButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        tButton.setText("T");
        tButton.setMaximumSize(new java.awt.Dimension(10, 10));
        tButton.setPreferredSize(new java.awt.Dimension(25, 20));
        tButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(tButton);
        tButton.setBounds(180, 340, 40, 32);

        uButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        uButton.setText("U");
        uButton.setMaximumSize(new java.awt.Dimension(10, 10));
        uButton.setPreferredSize(new java.awt.Dimension(25, 20));
        uButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(uButton);
        uButton.setBounds(230, 340, 40, 32);

        vButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vButton.setText("V");
        vButton.setMaximumSize(new java.awt.Dimension(10, 10));
        vButton.setPreferredSize(new java.awt.Dimension(25, 20));
        vButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(vButton);
        vButton.setBounds(280, 340, 40, 32);

        wButton.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        wButton.setText("W");
        wButton.setMaximumSize(new java.awt.Dimension(10, 10));
        wButton.setPreferredSize(new java.awt.Dimension(25, 20));
        wButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(wButton);
        wButton.setBounds(330, 340, 40, 32);

        xButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        xButton.setText("X");
        xButton.setMaximumSize(new java.awt.Dimension(10, 10));
        xButton.setPreferredSize(new java.awt.Dimension(25, 20));
        xButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(xButton);
        xButton.setBounds(380, 340, 40, 32);

        yButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        yButton.setText("Y");
        yButton.setMaximumSize(new java.awt.Dimension(10, 10));
        yButton.setPreferredSize(new java.awt.Dimension(25, 20));
        yButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(yButton);
        yButton.setBounds(430, 340, 40, 32);

        zButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        zButton.setText("Z");
        zButton.setMaximumSize(new java.awt.Dimension(10, 10));
        zButton.setPreferredSize(new java.awt.Dimension(25, 20));
        zButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(zButton);
        zButton.setBounds(480, 340, 40, 32);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        hangmanGame.add(jPanel3);
        jPanel3.setBounds(290, 22, 8, 170);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 61, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        hangmanGame.add(jPanel4);
        jPanel4.setBounds(290, 20, 61, 8);

        head.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout headLayout = new javax.swing.GroupLayout(head);
        head.setLayout(headLayout);
        headLayout.setHorizontalGroup(
            headLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        headLayout.setVerticalGroup(
            headLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        hangmanGame.add(head);
        head.setBounds(340, 60, 30, 30);

        body.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout bodyLayout = new javax.swing.GroupLayout(body);
        body.setLayout(bodyLayout);
        bodyLayout.setHorizontalGroup(
            bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        bodyLayout.setVerticalGroup(
            bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        hangmanGame.add(body);
        body.setBounds(350, 90, 8, 50);

        rightArm.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout rightArmLayout = new javax.swing.GroupLayout(rightArm);
        rightArm.setLayout(rightArmLayout);
        rightArmLayout.setHorizontalGroup(
            rightArmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        rightArmLayout.setVerticalGroup(
            rightArmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        hangmanGame.add(rightArm);
        rightArm.setBounds(320, 100, 30, 9);

        leftArm.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout leftArmLayout = new javax.swing.GroupLayout(leftArm);
        leftArm.setLayout(leftArmLayout);
        leftArmLayout.setHorizontalGroup(
            leftArmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        leftArmLayout.setVerticalGroup(
            leftArmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        hangmanGame.add(leftArm);
        leftArm.setBounds(350, 100, 40, 9);

        leftLeg.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout leftLegLayout = new javax.swing.GroupLayout(leftLeg);
        leftLeg.setLayout(leftLegLayout);
        leftLegLayout.setHorizontalGroup(
            leftLegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        leftLegLayout.setVerticalGroup(
            leftLegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        hangmanGame.add(leftLeg);
        leftLeg.setBounds(320, 130, 30, 9);

        rightLeg.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout rightLegLayout = new javax.swing.GroupLayout(rightLeg);
        rightLeg.setLayout(rightLegLayout);
        rightLegLayout.setHorizontalGroup(
            rightLegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        rightLegLayout.setVerticalGroup(
            rightLegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        hangmanGame.add(rightLeg);
        rightLeg.setBounds(350, 130, 40, 9);

        jPanel8.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        hangmanGame.add(jPanel8);
        jPanel8.setBounds(350, 20, 8, 40);

        jPanel9.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        hangmanGame.add(jPanel9);
        jPanel9.setBounds(140, 183, 329, 9);

        l8.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l8Layout = new javax.swing.GroupLayout(l8);
        l8.setLayout(l8Layout);
        l8Layout.setHorizontalGroup(
            l8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l8Layout.setVerticalGroup(
            l8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l8);
        l8.setBounds(440, 250, 40, 10);

        l1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l1Layout = new javax.swing.GroupLayout(l1);
        l1.setLayout(l1Layout);
        l1Layout.setHorizontalGroup(
            l1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l1Layout.setVerticalGroup(
            l1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l1);
        l1.setBounds(90, 250, 40, 10);

        l3.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l3Layout = new javax.swing.GroupLayout(l3);
        l3.setLayout(l3Layout);
        l3Layout.setHorizontalGroup(
            l3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l3Layout.setVerticalGroup(
            l3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l3);
        l3.setBounds(190, 250, 40, 10);

        l4.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l4Layout = new javax.swing.GroupLayout(l4);
        l4.setLayout(l4Layout);
        l4Layout.setHorizontalGroup(
            l4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l4Layout.setVerticalGroup(
            l4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l4);
        l4.setBounds(240, 250, 40, 10);

        l5.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l5Layout = new javax.swing.GroupLayout(l5);
        l5.setLayout(l5Layout);
        l5Layout.setHorizontalGroup(
            l5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l5Layout.setVerticalGroup(
            l5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l5);
        l5.setBounds(290, 250, 40, 10);

        l2.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l2Layout = new javax.swing.GroupLayout(l2);
        l2.setLayout(l2Layout);
        l2Layout.setHorizontalGroup(
            l2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l2Layout.setVerticalGroup(
            l2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l2);
        l2.setBounds(140, 250, 40, 10);

        l7.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l7Layout = new javax.swing.GroupLayout(l7);
        l7.setLayout(l7Layout);
        l7Layout.setHorizontalGroup(
            l7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l7Layout.setVerticalGroup(
            l7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l7);
        l7.setBounds(390, 250, 40, 10);

        l6.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout l6Layout = new javax.swing.GroupLayout(l6);
        l6.setLayout(l6Layout);
        l6Layout.setHorizontalGroup(
            l6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        l6Layout.setVerticalGroup(
            l6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        hangmanGame.add(l6);
        l6.setBounds(340, 250, 40, 10);

        skipButton.setText("Skip");
        skipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipButtonActionPerformed(evt);
            }
        });
        hangmanGame.add(skipButton);
        skipButton.setBounds(500, 70, 80, 25);

        dateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTextFieldActionPerformed(evt);
            }
        });
        hangmanGame.add(dateTextField);
        dateTextField.setBounds(420, 10, 170, 30);

        theWrong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        theWrong.setText("Incorrect Guess!");
        hangmanGame.add(theWrong);
        theWrong.setBounds(450, 126, 110, 30);

        mainPanel.add(hangmanGame, "card5");

        colorGame.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                colorGameVetoableChange(evt);
            }
        });

        dateTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTextField1ActionPerformed(evt);
            }
        });

        redButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SwingProjectv1/redcircle.png"))); // NOI18N
        redButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                redButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                redButtonMouseExited(evt);
            }
        });
        redButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redButtonActionPerformed(evt);
            }
        });

        greenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SwingProjectv1/greencircle.png"))); // NOI18N
        greenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                greenButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                greenButtonMouseExited(evt);
            }
        });
        greenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenButtonActionPerformed(evt);
            }
        });

        purpleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SwingProjectv1/purplecircle.png"))); // NOI18N
        purpleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                purpleButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                purpleButtonMouseExited(evt);
            }
        });
        purpleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purpleButtonActionPerformed(evt);
            }
        });

        blueButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SwingProjectv1/bluecircle.png"))); // NOI18N
        blueButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                blueButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                blueButtonMouseExited(evt);
            }
        });
        blueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueButtonActionPerformed(evt);
            }
        });

        yellowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SwingProjectv1/yellowcircle.png"))); // NOI18N
        yellowButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                yellowButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                yellowButtonMouseExited(evt);
            }
        });
        yellowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowButtonActionPerformed(evt);
            }
        });

        answer.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        answer.setText("jLabel10");

        javax.swing.GroupLayout colorGameLayout = new javax.swing.GroupLayout(colorGame);
        colorGame.setLayout(colorGameLayout);
        colorGameLayout.setHorizontalGroup(
            colorGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorGameLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(dateTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorGameLayout.createSequentialGroup()
                .addGroup(colorGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorGameLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(redButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(purpleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorGameLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(yellowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addGroup(colorGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(colorGameLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(blueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                        .addGap(56, 56, 56)
                        .addComponent(greenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)))
                .addGap(65, 65, 65))
        );
        colorGameLayout.setVerticalGroup(
            colorGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorGameLayout.createSequentialGroup()
                .addGroup(colorGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(colorGameLayout.createSequentialGroup()
                        .addComponent(dateTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(colorGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colorGameLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(redButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(colorGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blueButton)
                            .addComponent(yellowButton))
                        .addGap(55, 55, 55))
                    .addGroup(colorGameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(purpleButton)
                        .addGap(32, 32, 32)
                        .addComponent(greenButton)
                        .addGap(66, 66, 66))))
        );

        mainPanel.add(colorGame, "card8");

        jLabel10.setText("Your Score is: ");

        colorScoreText.setText("jLabel12");

        endButton2.setText("end");
        endButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorGameEndLayout = new javax.swing.GroupLayout(colorGameEnd);
        colorGameEnd.setLayout(colorGameEndLayout);
        colorGameEndLayout.setHorizontalGroup(
            colorGameEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorGameEndLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorScoreText, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(242, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorGameEndLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(endButton2)
                .addGap(84, 84, 84))
        );
        colorGameEndLayout.setVerticalGroup(
            colorGameEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorGameEndLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addGroup(colorGameEndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorScoreText))
                .addGap(91, 91, 91)
                .addComponent(endButton2)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        mainPanel.add(colorGameEnd, "card9");

        endPage.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel5.setText("Score");

        endButton.setText("End");
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        finalScoreTextBox.setEditable(false);

        javax.swing.GroupLayout endPageLayout = new javax.swing.GroupLayout(endPage);
        endPage.setLayout(endPageLayout);
        endPageLayout.setHorizontalGroup(
            endPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endPageLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addGroup(endPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(endButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(endPageLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalScoreTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addContainerGap(257, Short.MAX_VALUE))
        );
        endPageLayout.setVerticalGroup(
            endPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endPageLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(endPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalScoreTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(endButton)
                .addGap(56, 56, 56))
        );

        mainPanel.add(endPage, "card6");

        javax.swing.GroupLayout sudokuGameLayout = new javax.swing.GroupLayout(sudokuGame);
        sudokuGame.setLayout(sudokuGameLayout);
        sudokuGameLayout.setHorizontalGroup(
            sudokuGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        sudokuGameLayout.setVerticalGroup(
            sudokuGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        mainPanel.add(sudokuGame, "card10");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    // method: randomWord
    // purpose: This method uses the random class to randomly select a word from the array wordList and save it to  the variable word.
    public void randomWord()
    {
        Random r = new Random();
        String[] wordList = {"abstract", "cemetery", "nurse", "pharmacy", "climbing"};
        
        word = wordList[r.nextInt(5)];
       
    }
     //method: backHighscoreButtonActtionPerformed
     //purpose: Sets all jPanels visiblity to false,but menu, returning the user to the menu window.
    private void backHighscoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backHighscoreButtonActionPerformed

        menu.setVisible(true);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        
    }//GEN-LAST:event_backHighscoreButtonActionPerformed
     //method: highscoreButtonActtionPerformed
     //purpose: Sets all jPanels visiblity to false,but highscores, getting the user to the highscores window.
    private void highscoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highscoreButtonActionPerformed
        // TODO add your handling code here:
        menu.setVisible(false);
        highscores.setVisible(true);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        
        try {
            BufferedReader br = new BufferedReader(new FileReader("highscore.txt"));
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();
            while (line!=null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = br.readLine();
            }
            String fullString = sb.toString();
            highscoresTextBox.setText(fullString);
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TheWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TheWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_highscoreButtonActionPerformed
     
    //method: checkNewHighScore
    //purpose: After the game ends, if the user scores a higher score than the lowest score,
    //         a prompt will display asking for a username and will update the highscores txt file
    //         with the new high score.     
    private void checkNewHighScore() throws FileNotFoundException {             
        try {         
            Path filePath = Paths.get("highscore.txt");
            Scanner inputFile = new Scanner(filePath);
            String temp = "";
            int index = 0;
            while (inputFile.hasNextLine()) {
                temp = (inputFile.nextLine());
                int i = 0;
                //System.out.println(temp);
                for (char c : temp.toCharArray()) {
                    if (c == '.') {
                        if (index > 4) {
                            index = 4;
                        }
                        names[index] = temp.substring(0, i);
                        scores[index] = temp.substring(i + 4, temp.length());
                        list.add(names[index] + "...." + scores[index]);
                        System.out.println(names[index] + "...." + scores[index]);
                        index++;
                        break;
                    }
                    i++;
                }
            }
        } catch (IOException e) {}
        
        sortArrays();
        int smallest = Integer.parseInt(scores[4]);
        for (String i : scores) {
            if (Integer.parseInt(i) <= smallest) {
                smallest = Integer.parseInt(i);
            }
        }
        if (colorScore > smallest) {
            String name = JOptionPane.showInputDialog(null, "Enter The Name You Want To Display In HighScores", "NEW HIGH SCORE", JOptionPane.QUESTION_MESSAGE);
            PrintWriter oStream = new PrintWriter("highscore.txt");
            //FileClearer f = new FileClearer(fileName);
            oStream = new PrintWriter("highscore.txt");
            scores[4] = colorScore + "";
            names[4] = name;
            sortArrays();
            list.clear();
            for (int i = 0; i < scores.length; i++) {
                list.add(names[i] + "...." + scores[i]);
            }
            for (Object j : list) {
                oStream.println(j.toString());
                oStream.flush();
                System.out.println(j.toString());
            }
            oStream.close();
        }
    }
    
    //method: sort Arrays
    //purpose: Sorts the array to make it easier to find the lowest score
    public void sortArrays() {
        int largest = Integer.parseInt(scores[0]), index = 0, tempNum = 0;
        String temp = "";

        for (int i = 0; i < names.length; i++) {
            index = i;
            largest = Integer.parseInt(scores[i]);
            for (int j = i; j < names.length; j++) {
                if (Integer.parseInt(scores[j]) > largest) {
                    largest = Integer.parseInt(scores[j]);
                    index = j;
                    //System.out.println("Largest : " + largest + "index = " + index);
                }
            }
            //System.out.println("swapping");
            temp = names[i];
            names[i] = names[index];
            names[index] = temp;
            tempNum = Integer.parseInt(scores[i]);
            scores[i] = scores[index];
            scores[index] = tempNum + "";

        }
    }
    
    //method: creditsButtonActionPerformed
    //purpose: Sets all jPanels visiblity to false,but credits, getting the user to the credits window.
    private void creditsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditsButtonActionPerformed
        // TODO add your handling code here:
        menu.setVisible(false);
        highscores.setVisible(false);
        credits.setVisible(true);
        hangmanGame.setVisible(false);
    }//GEN-LAST:event_creditsButtonActionPerformed

    //method: backCreditsButtonActionPerformed
    //purpose: Sets all jPanels visiblity to false,but menu, returning the user to the menu window.
    private void backCreditsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backCreditsButtonActionPerformed
        // TODO add your handling code here:      
        menu.setVisible(true);
        highscores.setVisible(false);
        credits.setVisible(false);
    }//GEN-LAST:event_backCreditsButtonActionPerformed

    //method:playButtionActionPerformed
    //purpose: Sets all jPanels visiblity to false,but hangmanGame, getting the user to the menu window.
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // TODO add your handling code here:
        menu.setVisible(false);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(true);
        
        getDate();
    }//GEN-LAST:event_playButtonActionPerformed

    //method:getDate
    //purpose: Shows the current date and time, updates every one second.
    public void getDate()
    {
     int delay = 1000;
        ActionListener updateTime = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Date date = new Date();
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMMM dd, yyyy  hh:mm:ss");
                String strDate = dateFormat.format(date);
                dateTextField.setText(strDate);
                dateTextField1.setText(strDate);
            }
        };
        Timer timer = new Timer(delay, updateTime);
        timer.setInitialDelay(0);
        timer.start();
           
    }
    //method: isGameOver
    //purpose: Checks if score is equal to 40 or not and returns a boolean value.
    public boolean isGameOver()
    {
        over = false;
        if(score == 40)
        {
            over = true;
            
        }
        else
            over = false;
        return over;
        
    }
     //method: hideMan
    //purpose: Hides components of the hangman and stores in an array for later use.
    public void hideMan()
    {
        head.setVisible(false);
        body.setVisible(false);
        leftArm.setVisible(false);
        rightArm.setVisible(false);
        leftLeg.setVisible(false);
        rightLeg.setVisible(false);
        
        theHangMan[0]=head;
        theHangMan[1]=body;
        theHangMan[2]=leftArm;
        theHangMan[3]=rightArm;
        theHangMan[4]=leftLeg;
        theHangMan[5]=rightLeg;
        
        
    }
     //method:lines
    //purpose:Hides lines and stores in array for later use.
    
    public void lines()
    {
        l1.setVisible(false);
        l2.setVisible(false);
        l3.setVisible(false);
        l4.setVisible(false);
        l5.setVisible(false);
        l6.setVisible(false);
        l7.setVisible(false);
        l8.setVisible(false);
        
        lines[0] = l1;
        lines[1] = l2;
        lines[2] = l3;
        lines[3] = l4;
        lines[4] = l5;
        lines[5] = l6;
        lines[6] = l7;
        lines[7] = l8;
        
    }
    //method: win
    //purpose: Hides all jPanels, but end page, and appends score value on endPage.
    
    public void win() 
    {
        menu.setVisible(false);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        endPage.setVisible(false);
        colorGame.setVisible(true);
        colorGameEnd.setVisible(false);
        colorScore = score;
        startColor();        
    }
    
    //method: showMan
    //purpose: shows hangman and guessed incorrect message.
    public void showMan()
    {
        theHangMan[z].setVisible(true);
        theWrong.setVisible(true);
        z++;
    }
    
    //method: playTheGame
    //purpose: checks the word length and shows an appropriate amount of lines and textfields.
    public void playTheGame()
    {
        theWrong.setVisible(false);
        setTextField();
        lines();
        hideMan();
        score = 100;
        randomWord();
        
        for(int i = 0;i < word.length(); i++)
        {
            jtf[i].setText("");
            jtf[i].setVisible(true);
            lines[i].setVisible(true);
        }
      
       
    }
    //method: toSkip
    //purpose: hides all jPanels,but endpage, and appends score.
    public void toSkip()
    {
        menu.setVisible(false);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        endPage.setVisible(false);
        colorGame.setVisible(true);
        colorGameEnd.setVisible(false);
        startColor();
        if(over == true)
            colorScore =  score;
        if(over == false)
            colorScore = 0;
    }
    
    

    
    
    //method:aButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window

    
    private void aButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
        char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('a' == check[i])
            {
                //set letter
                jtf[i].setText("A");
                letterCount++;
            } 
        }
        aButton.setEnabled(false);
        if(letterCount == 0)
        {
           score -= 10;
           showMan();
           //hangman part
        }
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
        
        
        
    }//GEN-LAST:event_aButtonActionPerformed

    private void scoreTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreTextFieldActionPerformed
        // TODO add your handling code here:
         
      
    }//GEN-LAST:event_scoreTextFieldActionPerformed
   //method:bButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void bButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('b' == check[i])
            {
                //set letter
                jtf[i].setText("B");
                letterCount++;
            } 
        }
        bButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_bButtonActionPerformed
   //method:cButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void cButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('c' == check[i])
            {
                //set letter
                jtf[i].setText("C");
                letterCount++;
            } 
        }
        cButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           showMan();
        }
           //hangman part
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_cButtonActionPerformed
    //method:dButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman windod
    private void dButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('d' == check[i])
            {
                //set letter
                jtf[i].setText("D");
                letterCount++;
            } 
        }
        dButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_dButtonActionPerformed

     //method:eButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void eButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('e' == check[i])
            {
                //set letter
                jtf[i].setText("E");
                letterCount++;
                
            } 
        }
        eButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        if(isGameOver()){
            toSkip();
        }
        totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_eButtonActionPerformed
    //method:fButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void fButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('f' == check[i])
            {
                //set letter
                jtf[i].setText("F");
                letterCount++;
            } 
        }
        fButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_fButtonActionPerformed

     //method:gButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void gButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('g' == check[i])
            {
                //set letter
                jtf[i].setText("G");
                letterCount++;
            } 
        }
        gButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_gButtonActionPerformed

     //method:hButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void hButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('h' == check[i])
            {
                //set letter
                jtf[i].setText("H");
                letterCount++;
            } 
        }
        hButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_hButtonActionPerformed

     //method:iButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void iButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('i' == check[i])
            {
                //set letter
                jtf[i].setText("I");
                letterCount++;
            } 
        }
        iButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_iButtonActionPerformed

     //method:jButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('j' == check[i])
            {
                //set letter
                jtf[i].setText("J");
                letterCount++;
            } 
        }
        jButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_jButtonActionPerformed

     //method:kButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void kButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('k' == check[i])
            {
                //set letter
                jtf[i].setText("K");
                letterCount++;
            } 
        }
        kButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_kButtonActionPerformed

      //method:lButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void lButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('l' == check[i])
            {
                //set letter
                jtf[i].setText("L");
                letterCount++;
            } 
        }
        lButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_lButtonActionPerformed

     //method:mButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void mButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('m' == check[i])
            {
                //set letter
                jtf[i].setText("M");
                letterCount++;
            } 
        }
        mButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_mButtonActionPerformed

     //method:nButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void nButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('n' == check[i])
            {
                //set letter
                jtf[i].setText("N");
                letterCount++;
            } 
        }
        nButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_nButtonActionPerformed

     //method:oButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void oButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('o' == check[i])
            {
                //set letter
                jtf[i].setText("O");
                letterCount++;
            } 
        }
        oButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_oButtonActionPerformed

     //method:pButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void pButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('p' == check[i])
            {
                //set letter
                jtf[i].setText("P");
                letterCount++;
            } 
        }
        pButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_pButtonActionPerformed

     //method:qButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void qButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('q' == check[i])
            {
                //set letter
                jtf[i].setText("Q");
                letterCount++;
            } 
        }
        qButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_qButtonActionPerformed

     //method:rButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void rButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('r' == check[i])
            {
                //set letter
                jtf[i].setText("R");
                letterCount++;
            } 
        }
        rButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_rButtonActionPerformed

     //method:sButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void sButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('s' == check[i])
            {
                //set letter
                jtf[i].setText("S");
                letterCount++;
            } 
        }
        sButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_sButtonActionPerformed

     //method:tButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void tButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('t' == check[i])
            {
                //set letter
                jtf[i].setText("T");
                letterCount++;
            } 
        }
        tButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_tButtonActionPerformed

     //method:uButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void uButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uButtonActionPerformed
        // TODO add your handling code here:
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('u' == check[i])
            {
                //set letter
                jtf[i].setText("U");
                letterCount++;
            } 
        }
        uButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_uButtonActionPerformed

     //method:vButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void vButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('v' == check[i])
            {
                //set letter
                jtf[i].setText("V");
                letterCount++;
            } 
        }
        vButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_vButtonActionPerformed

     //method:wButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void wButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('w' == check[i])
            {
                //set letter
                jtf[i].setText("W");
                letterCount++;
            } 
        }
        wButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_wButtonActionPerformed

     //method:xButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void xButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xButtonActionPerformed
        // TODO add your handling code here:
         theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('x' == check[i])
            {
                //set letter
                jtf[i].setText("X");
                letterCount++;
            } 
        }
        xButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_xButtonActionPerformed

     //method:yButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void yButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('y' == check[i])
            {
                //set letter
                jtf[i].setText("Y");
                letterCount++;
            } 
        }
        yButton.setEnabled(false);
        if(letterCount == 0)
        {  score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_yButtonActionPerformed

     //method:zButtonActionPerformed
    //purpose: Splits word into char array and checks for letter of button pressed
    //if the letter is found it is appended to the screen and lettercount is incremented
    //the letter becomes disabled
    //if the letter count equals zero, 10 points are subtracted from the score and a hangman part is shown
    //if game is lost you procceed to skip method
    //The letter count is added to the totalLetterCount, and is compared to the word's letter count
    //if true the win method is called 
    //The score is appended on the hangman window
    private void zButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zButtonActionPerformed
        // TODO add your handling code here:
          theWrong.setVisible(false);
         char[] check = word.toCharArray();
        
        int letterCount = 0;
        for(int i = 0; i < check.length;i++){
            if('z' == check[i])
            {
                //set letter
                jtf[i].setText("Z");
                letterCount++;
            } 
        }
        zButton.setEnabled(false);
        if(letterCount == 0)
        { score -= 10;
           //hangman part
           showMan();
        }
        
        if(isGameOver()){
            toSkip();
        }
         totalLetterCount+= letterCount;
        if(totalLetterCount == check.length)
         {
            win();
          }
        scoreTextField.setText(new Integer(score).toString());
    }//GEN-LAST:event_zButtonActionPerformed

    //method: skipButtonActionPerformed
    //purpose: Sets all jPanels visiblity to false, but the end page, and appends the score to the screen.
    private void skipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipButtonActionPerformed
        // TODO add your handling code here:
        menu.setVisible(false);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        endPage.setVisible(false);
         colorGameEnd.setVisible(false);
        colorGame.setVisible(true);
        score = 0;
        
        startColor();   
        finalScoreTextBox.setText(Integer.toString(score));
    }//GEN-LAST:event_skipButtonActionPerformed

    private void dateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateTextFieldActionPerformed

    //method: endButtonActionPerformed
    //purpose: Hides all jPanels, and starts color game
    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        // TODO add your handling code here:
        
        // Not exactly how he wants it. Fix to bring back to menu
        // dispose();
        // TheWindow w = new TheWindow();
         // w.setVisible(true);
        startUp.setVisible(false);
        menu.setVisible(false);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        endPage.setVisible(false);
         colorGameEnd.setVisible(false);
        colorGame.setVisible(true);
        
        startColor();     
    }//GEN-LAST:event_endButtonActionPerformed
    
    //method: reInit
    //purpose: Re-Intiallizes important variables to allow for replayablity
    public void reInit()
    {
       score = 100;
       word ="";
       jtf = new JTextField[8];
       lines = new JPanel[8];
       theHangMan = new JPanel[6];
       z = 0;
       over = false;
       totalLetterCount = 0;
       
       colorScore = 0;
       colorPlays = 0;
      
       aButton.setEnabled(true);
       bButton.setEnabled(true);
       cButton.setEnabled(true);
       dButton.setEnabled(true);
       eButton.setEnabled(true);
       fButton.setEnabled(true);
       gButton.setEnabled(true);
       hButton.setEnabled(true);
       iButton.setEnabled(true);
       jButton.setEnabled(true);
       kButton.setEnabled(true);
       lButton.setEnabled(true);
       mButton.setEnabled(true);
       nButton.setEnabled(true);
       oButton.setEnabled(true);
       pButton.setEnabled(true);
       qButton.setEnabled(true);
       rButton.setEnabled(true);
       sButton.setEnabled(true);
       tButton.setEnabled(true);
       uButton.setEnabled(true);
       vButton.setEnabled(true);
       wButton.setEnabled(true);
       xButton.setEnabled(true);
       yButton.setEnabled(true);
       zButton.setEnabled(true);
       
       scoreTextField.setText(new Integer(score).toString());
       playTheGame();   
    }
    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void dateTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateTextField1ActionPerformed

    
    //method: blueButtonActionPerformed
    //purpose: allow correct color to be matched with color of text and end game
    private void blueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueButtonActionPerformed
        
        colorChoice = Color.blue;
        colorPlays += 1;
       
        if (colorChoice.getRGB() == colorCorrect.getRGB()){
            colorScore += 100;  
          
        }
      
        
        if (colorPlays == 5){
            try {
                toColorEnd();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TheWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        colorGame();
    }//GEN-LAST:event_blueButtonActionPerformed

    private void yellowButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yellowButtonMouseEntered
        yellowButton.setBackground(Color.orange);
        
    }//GEN-LAST:event_yellowButtonMouseEntered

    private void yellowButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yellowButtonMouseExited
        yellowButton.setBackground(UIManager.getColor("control"));
    }//GEN-LAST:event_yellowButtonMouseExited

    
     //method: yellowButtonActionPerformed
    //purpose: allow correct color to be matched with color of text and end game
    private void yellowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowButtonActionPerformed
        colorChoice = Color.yellow;
        colorPlays += 1;
      
        if (colorChoice.getRGB() == colorCorrect.getRGB()){
            colorScore += 100;  
           
        }
       
        if (colorPlays == 5){
            try {
                toColorEnd();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TheWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        colorGame();
    }//GEN-LAST:event_yellowButtonActionPerformed

    private void redButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redButtonMouseEntered
        redButton.setBackground(Color.orange);
      
    }//GEN-LAST:event_redButtonMouseEntered

    private void redButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redButtonMouseExited
        redButton.setBackground(UIManager.getColor("control"));
    }//GEN-LAST:event_redButtonMouseExited

    private void blueButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blueButtonMouseEntered
        blueButton.setBackground(Color.orange);
         
    }//GEN-LAST:event_blueButtonMouseEntered

    private void blueButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blueButtonMouseExited
        blueButton.setBackground(UIManager.getColor("control"));
    }//GEN-LAST:event_blueButtonMouseExited

    private void greenButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenButtonMouseEntered
        greenButton.setBackground(Color.orange);
        
    }//GEN-LAST:event_greenButtonMouseEntered

    private void greenButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenButtonMouseExited
       greenButton.setBackground(UIManager.getColor("control"));
    }//GEN-LAST:event_greenButtonMouseExited

    private void purpleButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purpleButtonMouseEntered
       purpleButton.setBackground(Color.orange);
       
    }//GEN-LAST:event_purpleButtonMouseEntered

    private void purpleButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purpleButtonMouseExited
       purpleButton.setBackground(UIManager.getColor("control"));
    }//GEN-LAST:event_purpleButtonMouseExited

    //method: redButtonActionPerformed
    //purpose: allow correct color to be matched with color of text and end game
    private void redButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redButtonActionPerformed
        colorChoice = Color.red;
        colorPlays += 1;
       
        if (colorChoice.getRGB() == colorCorrect.getRGB()){
            colorScore += 100;  
            
        }
        
        
        if (colorPlays == 5){
            try {
                toColorEnd();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TheWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
         
        colorGame();
    }//GEN-LAST:event_redButtonActionPerformed

     //method: greenButtonActionPerformed
    //purpose: allow correct color to be matched with color of text and end game
    private void greenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenButtonActionPerformed
        colorChoice = Color.green;
        colorPlays += 1;
       
        if (colorChoice.getRGB() == colorCorrect.getRGB()){
            colorScore += 100;  
           
        }
     
        if (colorPlays == 5){
            try {
                toColorEnd();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TheWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        colorGame();
    }//GEN-LAST:event_greenButtonActionPerformed

     //method: purpleButtonActionPerformed
    //purpose: allow correct color to be matched with color of text and end game
    private void purpleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purpleButtonActionPerformed
        colorChoice = Color.magenta;
        colorPlays += 1;
        
        
        if (colorChoice.getRGB() == colorCorrect.getRGB()){
            colorScore += 100; 
            
        }
        
        if (colorPlays == 5){
            try {
                toColorEnd();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TheWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        
        colorGame();
    }//GEN-LAST:event_purpleButtonActionPerformed

    private void endButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButton2ActionPerformed
        startUp.setVisible(false);
        menu.setVisible(true);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        endPage.setVisible(false);
        colorGame.setVisible(false);
        colorGameEnd.setVisible(false);
        
        reInit();
    }//GEN-LAST:event_endButton2ActionPerformed

    private void colorGameVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_colorGameVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_colorGameVetoableChange

    //method:setTextField
    //purpose: sets all guess text areas visiblity to false and stores in array for later use
    public void setTextField()
    {
        
         jTextField1.setVisible(false);
         jTextField2.setVisible(false);
         jTextField3.setVisible(false);
         jTextField4.setVisible(false);
         
         jTextField5.setVisible(false);
         jTextField6.setVisible(false);
         jTextField7.setVisible(false);
         jTextField8.setVisible(false);
         
         jtf[0] = jTextField1;
         jtf[1] = jTextField2;
         jtf[2] = jTextField3;
         jtf[3] = jTextField4;
         jtf[4] = jTextField5;
         jtf[5] = jTextField6;
         jtf[6] = jTextField7;
         jtf[7] = jTextField8;
    }
    
    
    //method: startColor
    //purpose: starts the colorGame
       
    public void startColor(){
       
        colorGame();
        
    }
    
   
    //method: colorGame
    //purpose: starts the color game by selecting random word/ color combo
    
    public void colorGame(){
        
            Random r = new Random();
            int chosen = r.nextInt(5);
            int chosen2 = r.nextInt(5);
            Color[] color = new Color[]{Color.blue, Color.green, Color.red, Color.magenta, Color.yellow};        
            String[] wordList = {"yellow", "blue", "green", "red", "purple"};
            
            Color picked = color[chosen2];
            
            colorCorrect = picked;
            answer.setText(wordList[chosen]);
            answer.setForeground(picked); 
            

        
    }
    
    //method: toColorEnd
    //purpose: hides all jpanels and shows colorGameEnd and checks if there is a new highscore
    public void toColorEnd() throws FileNotFoundException{
        menu.setVisible(false);
        highscores.setVisible(false);
        credits.setVisible(false);
        hangmanGame.setVisible(false);
        endPage.setVisible(false);
        colorGame.setVisible(false);
        colorGameEnd.setVisible(true);
        
        colorScoreText.setText(new Integer(colorScore).toString());
        checkNewHighScore();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TheWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TheWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TheWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TheWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TheWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aButton;
    private javax.swing.JLabel answer;
    private javax.swing.JButton bButton;
    private javax.swing.JButton backCreditsButton;
    private javax.swing.JButton backHighscoreButton;
    private javax.swing.JButton blueButton;
    private javax.swing.JPanel body;
    private javax.swing.JButton cButton;
    private javax.swing.JPanel colorGame;
    private javax.swing.JPanel colorGameEnd;
    private javax.swing.JLabel colorScoreText;
    private javax.swing.JPanel credits;
    private javax.swing.JButton creditsButton;
    private javax.swing.JButton dButton;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JTextField dateTextField1;
    private javax.swing.JButton eButton;
    private javax.swing.JButton endButton;
    private javax.swing.JButton endButton2;
    private javax.swing.JPanel endPage;
    private javax.swing.JButton fButton;
    private javax.swing.JTextField finalScoreTextBox;
    private javax.swing.JButton gButton;
    private javax.swing.JButton greenButton;
    private javax.swing.JButton hButton;
    private javax.swing.JPanel hangmanGame;
    private javax.swing.JPanel head;
    private javax.swing.JButton highscoreButton;
    private javax.swing.JPanel highscores;
    private javax.swing.JTextArea highscoresTextBox;
    private javax.swing.JButton iButton;
    private javax.swing.JButton jButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JButton kButton;
    private javax.swing.JPanel l1;
    private javax.swing.JPanel l2;
    private javax.swing.JPanel l3;
    private javax.swing.JPanel l4;
    private javax.swing.JPanel l5;
    private javax.swing.JPanel l6;
    private javax.swing.JPanel l7;
    private javax.swing.JPanel l8;
    private javax.swing.JButton lButton;
    private javax.swing.JPanel leftArm;
    private javax.swing.JPanel leftLeg;
    private javax.swing.JButton mButton;
    public javax.swing.JPanel mainPanel;
    private javax.swing.JPanel menu;
    private javax.swing.JButton nButton;
    private javax.swing.JButton oButton;
    private javax.swing.JButton pButton;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JButton purpleButton;
    private javax.swing.JButton qButton;
    private javax.swing.JButton rButton;
    private javax.swing.JButton redButton;
    private javax.swing.JPanel rightArm;
    private javax.swing.JPanel rightLeg;
    private javax.swing.JButton sButton;
    private javax.swing.JTextField scoreTextField;
    private javax.swing.JButton skipButton;
    private javax.swing.JPanel startUp;
    private javax.swing.JPanel sudokuGame;
    private javax.swing.JButton tButton;
    private javax.swing.JLabel teamLabel;
    private javax.swing.JLabel theWrong;
    private javax.swing.JButton uButton;
    private javax.swing.JButton vButton;
    private javax.swing.JButton wButton;
    private javax.swing.JButton xButton;
    private javax.swing.JButton yButton;
    private javax.swing.JButton yellowButton;
    private javax.swing.JButton zButton;
    // End of variables declaration//GEN-END:variables
}
